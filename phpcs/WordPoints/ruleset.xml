<?xml version="1.0"?>
<ruleset name="WordPoints">
	<description>Sniffs for the coding standards of the WordPoints plugin</description>

	<config name="minimum_supported_wp_version" value="4.8" />

	<rule ref="WordPress-Core">
		<!--
			When associative arrays have only a few keys we allow them to be on a
			single line, but this sniff doesn't allow for that.
		-->
		<exclude name="WordPress.Arrays.ArrayDeclarationSpacing.AssociativeArrayFound" />

		<!-- We indent breaks to the level of the case, not the case body. -->
		<exclude name="PSR2.ControlStructures.SwitchDeclaration.BreakIndent" />

		<!-- We use comma-in-front style for multi-line function calls.-->
		<exclude name="Generic.Functions.FunctionCallArgumentSpacing.SpaceBeforeComma" />
		<exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments" />
	</rule>

	<rule ref="WordPress-Extra">
		<exclude name="WordPress.WP.GlobalVariablesOverride" />
		<!--
			We check syntax separately, so no need to have PHPCS do it. (And it is a
			huge performance hog since it does this with `shell_exec()`.)
		-->
		<exclude name="Generic.PHP.Syntax" />
	</rule>

	<rule ref="WordPress-Docs">
		<!-- I usually put an empty line before the file comment -->
		<exclude name="Squiz.Commenting.FileComment.SpacingAfterOpen" />
		<!-- This conflicts with heading comments within classes and EOF comments -->
		<exclude name="Squiz.Commenting.InlineComment" />
		<!-- These conflict with just putting a @since on child class var/method -->
		<exclude name="Generic.Commenting.DocComment.MissingShort" />
		<exclude name="Squiz.Commenting.VariableComment.MissingVar" />
		<!-- Forbids having a blank line before a block comment. -->
		<exclude name="Squiz.Commenting.BlockComment.HasEmptyLineBefore" />
		<!-- Conflicts with array hash notation. -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop" />
		<!-- I like to leave out param docs on child methods and hooks. -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamTag" />
		<!-- https://github.com/squizlabs/PHP_CodeSniffer/issues/601 -->
		<exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint" />
		<!-- This unfortunately flags even cases where there are only tags. -->
		<exclude name="Generic.Commenting.DocComment.SpacingBeforeTags" />
	</rule>

	<rule ref="WordPress.DB.DirectDatabaseQuery">
		<exclude name="WordPress.DB.DirectDatabaseQuery.SchemaChange" />
		<exclude name="WordPress.DB.DirectDatabaseQuery.DirectQuery" />
	</rule>

	<rule ref="WordPress.NamingConventions.ValidFunctionName">
		<exclude-pattern>/tests/*</exclude-pattern><!-- because of PHPUnit method names -->
	</rule>
	<rule ref="WordPress.NamingConventions.ValidVariableName">
		<properties>
			<property name="customPropertiesWhitelist" value="longOptions,textContent,preserveWhiteSpace" type="array" />
		</properties>
		<exclude-pattern>/tests/codeception/*</exclude-pattern>
	</rule>
	<rule ref="WordPress.NamingConventions.ValidHookName">
		<properties>
			<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/751#issuecomment-278739935 -->
			<property name="additionalWordDelimiters" value="-"/>
		</properties>
	</rule>

	<rule ref="WordPress.DB.DirectDatabaseQuery">
		<properties>
			<property name="customCacheDeleteFunctions" value="wordpoints_flush_points_logs_caches" type="array" />
		</properties>
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>
	<rule ref="WordPress.Security.ValidatedSanitizedInput">
		<properties>
			<property name="customSanitizingFunctions" value="wordpoints_int,wordpoints_posint,wordpoints_negint,wordpoints_verify_nonce" type="array" />
			<property name="customUnslashingSanitizingFunctions" value="wordpoints_int,wordpoints_posint,wordpoints_negint" type="array" />
		</properties>
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>
	<rule ref="WordPress.Security.EscapeOutput">
		<properties>
			<property name="customEscapingFunctions" value="wordpoints_int,wordpoints_posint,wordpoints_negint,wordpoints_format_points,wordpoints_sanitize_wp_error" type="array" />
		</properties>
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing">
		<properties>
			<property name="blank_line_after_check" value="0" />
		</properties>
	</rule>

	<rule ref="WordPoints.PHP.MissingEcho" />
	<rule ref="WordPoints.PHP.RequiredParentMethodCall" />

	<rule ref="WordPress.Security.NonceVerification">
		<properties>
			<property name="customNonceVerificationFunctions" value="wordpoints_verify_nonce" type="array" />
		</properties>
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.DB.PreparedSQL">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<rule ref="WordPoints.PHPUnit.MissingCovers">
		<include-pattern>/tests/phpunit/tests/*</include-pattern>
		<include-pattern>*/MissingCoversUnitTest.inc</include-pattern>
	</rule>

	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
		<exclude-pattern>/tests/codeception/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<!--
		The functions that the following 3 rules apply to are only used by deprecated
		functions, so we might remove these rules in future.
	-->
	<rule ref="WordPress.WP.AlternativeFunctions.file_system_read_fsockopen">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.WP.AlternativeFunctions.file_system_read_fclose">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.PHP.DiscouragedPHPFunctions.system_calls_shell_exec">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.PHP.DiscouragedPHPFunctions.system_calls_system">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<rule ref="WordPress.PHP.DiscouragedPHPFunctions.serialize_serialize">
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>

	<rule ref="Generic.Files.OneClassPerFile">
		<!-- These classes are deprecated and are autoloaded, so it is OK. -->
		<exclude-pattern>/src/components/points/includes/shortcodes.php</exclude-pattern>
		<!-- The points hooks classes are always loaded anyway, so this is OK. -->
		<exclude-pattern>/src/components/points/includes/deprecated.php</exclude-pattern>
		<!-- These classes are deprecated and autoloaded, so this is OK. -->
		<exclude-pattern>/src/components/points/includes/widgets.php</exclude-pattern>
		<!-- Deprecated legacy code. -->
		<exclude-pattern>/tests/phpunit/includes/mocks/points-hooks.php</exclude-pattern>
	</rule>

	<rule ref="WordPress.Files.FileName">
		<properties>
			<!-- We don't require class- to be prepended to class file names. -->
			<property name="strict_class_file_names" value="false" />
		</properties>
	</rule>

	<rule ref="Squiz.PHP.CommentedOutCode.Found">
		<exclude-pattern>*/index.php</exclude-pattern>
	</rule>

	<rule ref="Generic.PHP.DisallowAlternativePHPTags.MaybeASPOpenTagFound">
		<!--
			We used this style of tags for our Backbone templates, but eventually
			we'll replace this with the new hooks API which does it right.
		-->
		<exclude-pattern>/src/components/ranks/*</exclude-pattern>
	</rule>

	<rule ref="PSR2.Methods.MethodDeclaration.Underscore">
		<!-- Deprecated methods in a deprecated class in a deprecated file. -->
		<exclude-pattern>src/components/points/includes/class-un-installer.php</exclude-pattern>
		<!-- Abstract protected method named the same as a public interface method. -->
		<exclude-pattern>src/classes/hook/reaction/store.php</exclude-pattern>
		<exclude-pattern>src/classes/hook/reaction/store/options.php</exclude-pattern>
	</rule>

	<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<properties>
			<property name="maxPadding" value="16" />
		</properties>
	</rule>

	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<property name="ignoreNewline" value="false" />
			<property name="alignMultilineItems" value="!=100" />
		</properties>
		<exclude-pattern>*/index.php</exclude-pattern>
	</rule>

	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array" value="wordpoints,_wordpoints,is_wordpoints" />
		</properties>
		<exclude-pattern>/tests/*</exclude-pattern>
	</rule>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound">
		<!-- These files are included within function scope. -->
		<exclude-pattern>*/screens/*</exclude-pattern>
		<exclude-pattern>src/uninstall.php</exclude-pattern>
	</rule>

	<rule ref="WordPress.WP.DeprecatedFunctions" />
	<rule ref="WordPress.WP.DeprecatedClasses" />
	<rule ref="WordPress.WP.DeprecatedParameters" />

	<exclude-pattern>/vendor/*</exclude-pattern>
	<exclude-pattern type="relative">^/dev-lib/*</exclude-pattern>
	<exclude-pattern>/.idea/*</exclude-pattern>
	<exclude-pattern>/src/library/*</exclude-pattern>

</ruleset>
